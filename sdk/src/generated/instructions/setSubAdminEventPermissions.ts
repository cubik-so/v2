/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { AdminPermission, adminPermissionBeet } from '../types/AdminPermission'

/**
 * @category Instructions
 * @category SetSubAdminEventPermissions
 * @category generated
 */
export type SetSubAdminEventPermissionsInstructionArgs = {
  createKey: web3.PublicKey
  eventKey: web3.PublicKey
  permission: AdminPermission
}
/**
 * @category Instructions
 * @category SetSubAdminEventPermissions
 * @category generated
 */
export const setSubAdminEventPermissionsStruct = new beet.BeetArgsStruct<
  SetSubAdminEventPermissionsInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['createKey', beetSolana.publicKey],
    ['eventKey', beetSolana.publicKey],
    ['permission', adminPermissionBeet],
  ],
  'SetSubAdminEventPermissionsInstructionArgs'
)
/**
 * Accounts required by the _setSubAdminEventPermissions_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] newSubAdminAccount
 * @property [_writable_] subAdminAccount
 * @category Instructions
 * @category SetSubAdminEventPermissions
 * @category generated
 */
export type SetSubAdminEventPermissionsInstructionAccounts = {
  authority: web3.PublicKey
  newSubAdminAccount: web3.PublicKey
  subAdminAccount: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const setSubAdminEventPermissionsInstructionDiscriminator = [
  55, 164, 161, 136, 164, 102, 17, 237,
]

/**
 * Creates a _SetSubAdminEventPermissions_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetSubAdminEventPermissions
 * @category generated
 */
export function createSetSubAdminEventPermissionsInstruction(
  accounts: SetSubAdminEventPermissionsInstructionAccounts,
  args: SetSubAdminEventPermissionsInstructionArgs,
  programId = new web3.PublicKey('3o5FHxJVuU39wv7VSaYdewPosHLQzZGvPtdwnU4qYBiS')
) {
  const [data] = setSubAdminEventPermissionsStruct.serialize({
    instructionDiscriminator:
      setSubAdminEventPermissionsInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.newSubAdminAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.subAdminAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
