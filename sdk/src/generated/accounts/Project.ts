/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";
import {
  ProjectVerification,
  projectVerificationBeet,
} from "../types/ProjectVerification";

/**
 * Arguments used to create {@link Project}
 * @category Accounts
 * @category generated
 */
export type ProjectArgs = {
  owner: web3.PublicKey;
  status: ProjectVerification;
  counter: beet.bignum;
  multisig: web3.PublicKey;
  bump: number;
};

export const projectDiscriminator = [205, 168, 189, 202, 181, 247, 142, 19];
/**
 * Holds the data for the {@link Project} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Project implements ProjectArgs {
  private constructor(
    readonly owner: web3.PublicKey,
    readonly status: ProjectVerification,
    readonly counter: beet.bignum,
    readonly multisig: web3.PublicKey,
    readonly bump: number
  ) {}

  /**
   * Creates a {@link Project} instance from the provided args.
   */
  static fromArgs(args: ProjectArgs) {
    return new Project(
      args.owner,
      args.status,
      args.counter,
      args.multisig,
      args.bump
    );
  }

  /**
   * Deserializes the {@link Project} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Project, number] {
    return Project.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Project} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Project> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Project account at ${address}`);
    }
    return Project.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "3o5FHxJVuU39wv7VSaYdewPosHLQzZGvPtdwnU4qYBiS"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, projectBeet);
  }

  /**
   * Deserializes the {@link Project} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Project, number] {
    return projectBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Project} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return projectBeet.serialize({
      accountDiscriminator: projectDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Project}
   */
  static get byteSize() {
    return projectBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Project} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Project.byteSize,
      commitment
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Project} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Project.byteSize;
  }

  /**
   * Returns a readable version of {@link Project} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      owner: this.owner.toBase58(),
      status: "ProjectVerification." + ProjectVerification[this.status],
      counter: (() => {
        const x = <{ toNumber: () => number }>this.counter;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      multisig: this.multisig.toBase58(),
      bump: this.bump,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const projectBeet = new beet.BeetStruct<
  Project,
  ProjectArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["owner", beetSolana.publicKey],
    ["status", projectVerificationBeet],
    ["counter", beet.u64],
    ["multisig", beetSolana.publicKey],
    ["bump", beet.u8],
  ],
  Project.fromArgs,
  "Project"
);
