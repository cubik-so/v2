/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link Sponsor}
 * @category Accounts
 * @category generated
 */
export type SponsorArgs = {
  authority: web3.PublicKey;
  totalAmount: beet.bignum;
  totalAmountPaid: beet.bignum;
  token: web3.PublicKey;
  vault: web3.PublicKey;
  bump: number;
};

export const sponsorDiscriminator = [19, 128, 115, 109, 118, 109, 66, 213];
/**
 * Holds the data for the {@link Sponsor} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Sponsor implements SponsorArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly totalAmount: beet.bignum,
    readonly totalAmountPaid: beet.bignum,
    readonly token: web3.PublicKey,
    readonly vault: web3.PublicKey,
    readonly bump: number
  ) {}

  /**
   * Creates a {@link Sponsor} instance from the provided args.
   */
  static fromArgs(args: SponsorArgs) {
    return new Sponsor(
      args.authority,
      args.totalAmount,
      args.totalAmountPaid,
      args.token,
      args.vault,
      args.bump
    );
  }

  /**
   * Deserializes the {@link Sponsor} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Sponsor, number] {
    return Sponsor.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Sponsor} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Sponsor> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Sponsor account at ${address}`);
    }
    return Sponsor.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "3o5FHxJVuU39wv7VSaYdewPosHLQzZGvPtdwnU4qYBiS"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, sponsorBeet);
  }

  /**
   * Deserializes the {@link Sponsor} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Sponsor, number] {
    return sponsorBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Sponsor} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return sponsorBeet.serialize({
      accountDiscriminator: sponsorDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Sponsor}
   */
  static get byteSize() {
    return sponsorBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Sponsor} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Sponsor.byteSize,
      commitment
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Sponsor} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Sponsor.byteSize;
  }

  /**
   * Returns a readable version of {@link Sponsor} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      totalAmount: (() => {
        const x = <{ toNumber: () => number }>this.totalAmount;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      totalAmountPaid: (() => {
        const x = <{ toNumber: () => number }>this.totalAmountPaid;
        if (typeof x.toNumber === "function") {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      token: this.token.toBase58(),
      vault: this.vault.toBase58(),
      bump: this.bump,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const sponsorBeet = new beet.BeetStruct<
  Sponsor,
  SponsorArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["authority", beetSolana.publicKey],
    ["totalAmount", beet.u64],
    ["totalAmountPaid", beet.u64],
    ["token", beetSolana.publicKey],
    ["vault", beetSolana.publicKey],
    ["bump", beet.u8],
  ],
  Sponsor.fromArgs,
  "Sponsor"
);
